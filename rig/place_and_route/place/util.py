'Common utility functions for placement algorithms.'
from six import iteritems,itervalues
def subtract_resources(res_a,res_b):"Return the resources remaining after subtracting res_b's resources from\n    res_a.\n\n    Parameters\n    ----------\n    res_a : dict\n        Dictionary `{resource: value, ...}`.\n    res_b : dict\n        Dictionary `{resource: value, ...}`. Must be a (non-strict) subset of\n        res_a. If A resource is not present in res_b, the value is presumed to\n        be 0.\n    ";return {resource:value-res_b.get(resource,0) for (resource,value) in iteritems(res_a)}
def overallocated(res):'Returns true if any resource has a negative value.\n    ';return any(v<0 for v in itervalues(res))
def resources_after_reservation(res,constraint):'Return the resources available after a specified\n    ReserveResourceConstraint has been applied.\n\n    Note: the caller is responsible for testing that the constraint is\n    applicable to the core whose resources are being constrained.\n\n    Note: this function does not pay attention to the specific position of the\n    reserved regieon, only its magnitude.\n    ';res=res.copy();res[constraint.resource]-=constraint.reservation.stop-constraint.reservation.start;return res
