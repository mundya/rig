from rig.place_and_route.util import build_application_map,build_routing_tables
from rig.machine import Cores
from rig.netlist import Net
from rig.routing_table import Routes,RoutingTableEntry
from rig.place_and_route.routing_tree import RoutingTree
def test_build_application_map():assert build_application_map({},{},{})=={};v=object();vertices_applications={v:'my_app.aplx'};placements={v:(0,0)};allocation={v:{Cores:slice(1,2)}};assert build_application_map(vertices_applications,placements,allocation)=={'my_app.aplx':{(0,0):set([1])}};v=object();vertices_applications={v:'my_app.aplx'};placements={v:(0,0)};allocation={v:{Cores:slice(1,4)}};assert build_application_map(vertices_applications,placements,allocation)=={'my_app.aplx':{(0,0):set([1,2,3])}};v2=object();v1=object();v0=object();vertices_applications={v0:'my_app.aplx',v1:'my_app.aplx',v2:'my_app.aplx'};placements={v0:(0,0),v1:(0,0),v2:(1,0)};allocation={v0:{Cores:slice(1,2)},v1:{Cores:slice(2,3)},v2:{Cores:slice(1,2)}};assert build_application_map(vertices_applications,placements,allocation)=={'my_app.aplx':{(0,0):set([1,2]),(1,0):set([1])}};v2=object();v1=object();v0=object();vertices_applications={v0:'my_app.aplx',v1:'other_app.aplx',v2:'my_app.aplx'};placements={v0:(0,0),v1:(0,0),v2:(1,0)};allocation={v0:{Cores:slice(1,2)},v1:{Cores:slice(2,3)},v2:{Cores:slice(1,2)}};assert build_application_map(vertices_applications,placements,allocation)=={'my_app.aplx':{(0,0):set([1]),(1,0):set([1])},'other_app.aplx':{(0,0):set([2])}}
def test_build_routing_tables():assert build_routing_tables({},{})=={};net=Net(object(),object());routes={net:RoutingTree((0,0))};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(0,0):[RoutingTableEntry(set(),57005,48879)]};net=Net(object(),object());routes={net:RoutingTree((1,1),set([Routes.north,Routes.core_1]))};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(1,1):[RoutingTableEntry(set([Routes.north,Routes.core_1]),57005,48879)]};net=Net(object(),object());routes={net:RoutingTree((1,1),set([Routes.core_1,RoutingTree((2,1),set([Routes.core_2]))]))};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(1,1):[RoutingTableEntry(set([Routes.east,Routes.core_1]),57005,48879)],(2,1):[RoutingTableEntry(set([Routes.core_2]),57005,48879)]};net=Net(object(),object());routes={net:RoutingTree((7,1),set([Routes.core_1,RoutingTree((0,1),set([Routes.core_2]))]))};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(7,1):[RoutingTableEntry(set([Routes.east,Routes.core_1]),57005,48879)],(0,1):[RoutingTableEntry(set([Routes.core_2]),57005,48879)]};net=Net(object(),object());r3=RoutingTree((3,0));r2=RoutingTree((2,0),set([r3]));r1=RoutingTree((1,0),set([r2]));r0=RoutingTree((0,0),set([r1]));routes={net:r0};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(0,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(3,0):[RoutingTableEntry(set([]),57005,48879)]};net=Net(object(),object());r3=RoutingTree((3,0));r2=RoutingTree((2,0),set([r3]));r1=RoutingTree((1,0),set([r2]));r0=RoutingTree((0,0),set([r1]));routes={net:r0};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys,False)=={(0,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(1,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(2,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(3,0):[RoutingTableEntry(set([]),57005,48879)]};net=Net(object(),object());r3=RoutingTree((3,0),set([Routes.core_2,Routes.core_3]));r2=RoutingTree((2,0),set([r3]));r1=RoutingTree((1,0),set([r2]));r0=RoutingTree((0,0),set([r1]));routes={net:r0};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(0,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(3,0):[RoutingTableEntry(set([Routes.core_2,Routes.core_3]),57005,48879)]};net=Net(object(),object());r6=RoutingTree((3,1),set([Routes.core_6]));r5=RoutingTree((5,0),set([Routes.core_5]));r4=RoutingTree((4,0),set([r5]));r3=RoutingTree((3,0),set([r4,r6]));r2=RoutingTree((2,0),set([r3]));r1=RoutingTree((1,0),set([r2]));r0=RoutingTree((0,0),set([r1]));routes={net:r0};net_keys={net:(57005,48879)};assert build_routing_tables(routes,net_keys)=={(0,0):[RoutingTableEntry(set([Routes.east]),57005,48879)],(3,0):[RoutingTableEntry(set([Routes.north,Routes.east]),57005,48879)],(5,0):[RoutingTableEntry(set([Routes.core_5]),57005,48879)],(3,1):[RoutingTableEntry(set([Routes.core_6]),57005,48879)]};net0=Net(object(),object());net1=Net(object(),object());routes={net0:RoutingTree((2,2),set([Routes.core_1])),net1:RoutingTree((2,2),set([Routes.core_2]))};net_keys={net0:(57005,48879),net1:(4660,43981)};tables=build_routing_tables(routes,net_keys);assert set(tables)==set([(2,2)]);entries=tables[(2,2)];e0=RoutingTableEntry(set([Routes.core_1]),57005,48879);e1=RoutingTableEntry(set([Routes.core_2]),4660,43981);assert entries==[e0,e1] or entries==[e1,e0]
